import 'dotenv/config'; // ‚úÖ Carregar vari√°veis de ambiente (.env)
import express from "express";
import cors from "cors";
import cookieParser from "cookie-parser";
import path from "path";
import { fileURLToPath } from "url";

// Importar conex√µes e modelos
import mongooseConnection from "./config/db-connections.js";
import Hortalica from "./models/Hortalica.js";
import User from "./models/User.js";

// Importar rotas
import userRoutes from "./routes/userRoutes.js";
import hortalicaRoutes from "./routes/hortalicaRoutes.js";
import waterLevelRoutes from "./routes/waterLevelRoutes.js";

const app = express();

// ‚úÖ Middlewares
app.use(cookieParser());
app.use(express.urlencoded({ extended: false }));
app.use(express.json());

// ‚úÖ Configura√ß√£o CORS (aceita acesso do front-end da Vercel)
app.use(cors({
  origin: [
    "http://localhost:3000",                // Para teste local
    "https://greenrise.vercel.app",         // Caso use este dom√≠nio
    "https://greenrise-by-ceres.vercel.app",// Front hospedado
    "https://equipe-ceres.vercel.app"       // Outro dom√≠nio vinculado
  ],
  methods: ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"],
  allowedHeaders: ["Content-Type", "Authorization"],
  credentials: true
}));

// ‚úÖ Rotas principais
app.use("/", userRoutes);
app.use("/", hortalicaRoutes);
app.use("/", waterLevelRoutes);

// ‚úÖ Caminho absoluto para arquivos est√°ticos (uploads)
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const staticPath = path.join(__dirname, "..", "front-end", "uploads");

app.use("/uploads", express.static(staticPath));
console.log("üìÇ Servindo arquivos est√°ticos de:", staticPath);

// ‚úÖ Rota principal
app.get("/", async (req, res) => {
  try {
    const users = await User.find();
    const hortalicas = await Hortalica.find();
    res.status(200).json({
      message: "‚úÖ Rota Index Funcionando",
      users,
      hortalicas
    });
  } catch (error) {
    console.error("‚ùå Erro interno do servidor:", error);
    res.status(500).json({ error: "‚ùå Erro interno do servidor (rota /)" });
  }
});

// ‚úÖ Middleware para rotas n√£o encontradas
app.use((req, res) => {
  console.log(`‚ö†Ô∏è Rota n√£o encontrada: ${req.method} ${req.originalUrl}`);
  res.status(404).json({
    success: false,
    error: "Rota n√£o encontrada",
    message: `A rota ${req.method} ${req.originalUrl} n√£o existe`,
    timestamp: new Date().toISOString(),
  });
});

// ‚úÖ Inicializar servidor
const port = process.env.PORT || 4000;
app.listen(port, (error) => {
  if (error) {
    console.error("‚ùå Erro ao iniciar servidor:", error);
  } else {
    console.log(`‚úÖ API Greenrise rodando em http://localhost:${port}`);
  }
});